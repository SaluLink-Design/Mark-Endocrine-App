import jsPDF from 'jspdf';
import { CaseData } from './types';

export class PDFExportService {
  static exportCaseSummary(caseData: CaseData): void {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin;

    // Helper function to add text with word wrapping
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
      doc.setFontSize(fontSize);
      doc.setFont('helvetica', isBold ? 'bold' : 'normal');
      
      const lines = doc.splitTextToSize(text, contentWidth);
      doc.text(lines, margin, yPosition);
      yPosition += lines.length * (fontSize * 0.4) + 5;
      
      // Check if we need a new page
      if (yPosition > doc.internal.pageSize.getHeight() - margin) {
        doc.addPage();
        yPosition = margin;
      }
    };

    // Helper function to add a section header
    const addSectionHeader = (title: string) => {
      yPosition += 10;
      addText(title, 16, true);
      yPosition += 5;
    };

    // Header
    doc.setFillColor(151, 119, 192);
    doc.rect(0, 0, pageWidth, 30, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('SaluLink Chronic Treatment App', margin, 20);
    doc.text('Case Summary Report', margin, 35);
    
    doc.setTextColor(0, 0, 0);
    yPosition = 50;

    // Case Information
    addSectionHeader('Case Information');
    addText(`Case ID: ${caseData.id}`);
    addText(`Created: ${caseData.createdAt.toLocaleDateString()}`);
    addText(`Updated: ${caseData.updatedAt.toLocaleDateString()}`);

    // Original Notes
    addSectionHeader('Original Specialist Notes');
    addText(caseData.patientNotes);

    // Confirmed Condition
    addSectionHeader('Confirmed Condition');
    addText(caseData.confirmedCondition, 14, true);

    // Extracted Conditions
    if (caseData.extractedConditions.length > 0) {
      addSectionHeader('Extracted Conditions');
      caseData.extractedConditions.forEach(condition => {
        addText(`${condition.condition} (Confidence: ${Math.round(condition.confidence * 100)}%)`);
      });
    }

    // ICD Codes
    if (caseData.selectedIcdCodes.length > 0) {
      addSectionHeader('Selected ICD-10 Codes');
      caseData.selectedIcdCodes.forEach(code => {
        addText(`• ${code}`);
      });
    }

    // Diagnostic Procedures
    if (caseData.diagnosticProcedures.length > 0) {
      addSectionHeader('Diagnostic Procedures');
      caseData.diagnosticProcedures.forEach(procedure => {
        addText(`• ${procedure.name}`);
        addText(`  Code: ${procedure.code} | Coverage: ${procedure.coverage}`);
      });
    }

    // Ongoing Management
    if (caseData.ongoingProcedures.length > 0) {
      addSectionHeader('Ongoing Management Procedures');
      caseData.ongoingProcedures.forEach(procedure => {
        addText(`• ${procedure.name}`);
        addText(`  Code: ${procedure.code} | Coverage: ${procedure.coverage}`);
      });
    }

    // Medications
    if (caseData.selectedMedicines.length > 0) {
      addSectionHeader('Selected Medications');
      caseData.selectedMedicines.forEach(medicine => {
        addText(`• ${medicine.name}`);
        addText(`  Class: ${medicine.class}`);
        addText(`  Active Ingredient: ${medicine.activeIngredient}`);
        addText(`  CDA: ${medicine.cda}`);
      });
    }

    // Additional Notes
    if (caseData.motivationNotes || caseData.chronicRegistrationNotes) {
      addSectionHeader('Additional Notes');
      
      if (caseData.motivationNotes) {
        addText('Motivation Letter:', 12, true);
        addText(caseData.motivationNotes);
      }
      
      if (caseData.chronicRegistrationNotes) {
        addText('Chronic Registration Notes:', 12, true);
        addText(caseData.chronicRegistrationNotes);
      }
    }

    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(128, 128, 128);
      doc.text(
        `Page ${i} of ${pageCount}`,
        pageWidth - margin - 30,
        doc.internal.pageSize.getHeight() - 10
      );
      doc.text(
        'Generated by SaluLink Chronic Treatment App',
        margin,
        doc.internal.pageSize.getHeight() - 10
      );
    }

    // Save the PDF
    const fileName = `case-summary-${caseData.id}-${caseData.createdAt.toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  }

  static exportMultipleCases(cases: CaseData[]): void {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin;

    // Helper function to add text with word wrapping
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
      doc.setFontSize(fontSize);
      doc.setFont('helvetica', isBold ? 'bold' : 'normal');
      
      const lines = doc.splitTextToSize(text, contentWidth);
      doc.text(lines, margin, yPosition);
      yPosition += lines.length * (fontSize * 0.4) + 5;
      
      // Check if we need a new page
      if (yPosition > doc.internal.pageSize.getHeight() - margin) {
        doc.addPage();
        yPosition = margin;
      }
    };

    // Header
    doc.setFillColor(151, 119, 192);
    doc.rect(0, 0, pageWidth, 30, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('SaluLink Chronic Treatment App', margin, 20);
    doc.text('Multiple Cases Summary Report', margin, 35);
    
    doc.setTextColor(0, 0, 0);
    yPosition = 50;

    // Summary Statistics
    addText('Summary Statistics', 16, true);
    addText(`Total Cases: ${cases.length}`);
    addText(`Date Range: ${new Date(Math.min(...cases.map(c => c.createdAt.getTime()))).toLocaleDateString()} - ${new Date(Math.max(...cases.map(c => c.createdAt.getTime()))).toLocaleDateString()}`);
    
    // Condition Distribution
    const conditionCounts = cases.reduce((acc, caseData) => {
      acc[caseData.confirmedCondition] = (acc[caseData.confirmedCondition] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    addText('Condition Distribution:', 14, true);
    Object.entries(conditionCounts).forEach(([condition, count]) => {
      addText(`• ${condition}: ${count} cases`);
    });

    // Individual Cases Summary
    cases.forEach((caseData, index) => {
      addText(`\nCase ${index + 1}: ${caseData.confirmedCondition}`, 14, true);
      addText(`ID: ${caseData.id} | Created: ${caseData.createdAt.toLocaleDateString()}`);
      addText(`ICD Codes: ${caseData.selectedIcdCodes.join(', ')}`);
      addText(`Medications: ${caseData.selectedMedicines.length} selected`);
    });

    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(128, 128, 128);
      doc.text(
        `Page ${i} of ${pageCount}`,
        pageWidth - margin - 30,
        doc.internal.pageSize.getHeight() - 10
      );
      doc.text(
        'Generated by SaluLink Chronic Treatment App',
        margin,
        doc.internal.pageSize.getHeight() - 10
      );
    }

    // Save the PDF
    const fileName = `multiple-cases-summary-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  }
}
